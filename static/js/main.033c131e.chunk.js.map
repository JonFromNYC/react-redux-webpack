{"version":3,"sources":["serviceWorker.js","constants.js","reducers.js","components/Card.component.jsx","components/CardList.component.jsx","components/SearchBox.component.jsx","components/Scroll.component.jsx","components/ErrorBoundary.component.jsx","containers/App.component.jsx","actions.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","initialStateSearch","searchField","initialStateRobots","isPending","robots","Card","name","email","id","className","src","alt","CardList","map","user","i","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","hasError","info","this","setState","Component","App","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","response","json","data","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.033c131e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n// Reducer - search Robots\nexport const searchRobots = (state = initialStateSearch, action={})=>{\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField:action.payload});\n        default:\n            return state;\n    }\n};\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true});\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false});\n        default:\n            return state;\n    }\n}","import React from 'react';\n\n//card component - functional\n\nconst Card = ({ name, email, id }) =>{\n    return(\n        <div className='tc bg-light-green dib br3 ma2 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=''/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Card;","import React from 'react';\nimport Card from './Card.component';\n\n// const CardList = ({robots}) =>{\n//     const cardArray = robots.map((user,i) => {\n//         return (\n//             <Card \n//                 id={robots[i].id} \n//                 name={robots[i].name} \n//                 email={robots[i].email} \n//             />);\n//     });\n//     return (\n//         <div>{cardArray}</div>\n//     )\n// };\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n            {robots.map((user, i) => {\n                return (\n                    <Card\n                        key={i}\n                        id={robots[i].id}\n                        name={robots[i].name}\n                        email={robots[i].email}\n                    />);\n            })\n            }\n        </div>\n    )\n};\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange}) => {\n    return (\n        <div className=\"pa2\">\n            <input\n            aria-label=\"Search Employees\"\n                className=\"pa3 ba b--green bg-lightest-blue\" \n                type=\"Search\" \n                placeholder=\"Search\"\n                onChange={searchChange}\n            />\n        </div>\n    );\n};\n\nexport default SearchBox;","import React from 'react'\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflowY: \"scroll\", border: \"1px solid gray\", height: \"800px\"}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React,{Component} from 'react';\n\nclass ErrorBoundary extends Component{\n    constructor(){\n        super()\n        this.state = { hasError: false}\n    }\n\n    componentDidCatch(error,info){\n        this.setState({ hasError: true })\n    }\n\n    render() {\n        if(this.state.hasError){\n            return <h1>Sorry - Error Occured</h1>\n        }\n\n        return this.props.children; //Render the child-CardList\n    }        \n};\n\nexport default ErrorBoundary;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport CardList from '../components/CardList.component';\nimport SearchBox from '../components/SearchBox.component';\nimport Scroll from '../components/Scroll.component';\nimport ErrorBoundry from '../components/ErrorBoundary.component';\n\nimport {setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = (state) =>{\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n};\n\nconst mapDispatchToProps = (dispatch) =>{\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: ()=> dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n\n    componentDidMount(){\n        this.props.onRequestRobots();\n    }\n\n    render(){\n        const { searchField, onSearchChange, robots, isPending } = this.props;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n\n        return isPending ?\n            <h1>Loading</h1>\n            :\n            (\n                <div className=\"tc\">\n                    <h1>Employee Rolodex</h1>\n                    <SearchBox searchChange={onSearchChange} />\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filteredRobots} />\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n        );\n        }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD,\n        REQUEST_ROBOTS_PENDING,\n        REQUEST_ROBOTS_SUCCESS,\n        REQUEST_ROBOTS_FAILED\n} from './constants';\n// Search Field Action - takes text input from the user, returns an object \n// Action is to change the search field and send the text to the reducer\nexport const setSearchField = (text) =>({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n});\n\nexport const requestRobots = ()=> (dispatch) =>{\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider } from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers } from 'redux';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport 'tachyons';\nimport './index.css';\nimport App from './containers/App.component';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\n// const store = createStore(rootReducer, applyMiddleware(thunkMiddleware,logger)); // logger will leave reduc logging in prod\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}